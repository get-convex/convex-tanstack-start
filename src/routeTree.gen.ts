/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SsrRouteImport } from './routes/ssr'
import { Route as ReactQueryRouteImport } from './routes/react-query'
import { Route as LoadersRouteImport } from './routes/loaders'
import { Route as GcTimeRouteImport } from './routes/gcTime'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoadersPrefetchRouteImport } from './routes/loaders/prefetch'
import { Route as LoadersNoLoaderRouteImport } from './routes/loaders/no-loader'
import { Route as LoadersEnsureRouteImport } from './routes/loaders/ensure'

const SsrRoute = SsrRouteImport.update({
  id: '/ssr',
  path: '/ssr',
  getParentRoute: () => rootRouteImport,
} as any)
const ReactQueryRoute = ReactQueryRouteImport.update({
  id: '/react-query',
  path: '/react-query',
  getParentRoute: () => rootRouteImport,
} as any)
const LoadersRoute = LoadersRouteImport.update({
  id: '/loaders',
  path: '/loaders',
  getParentRoute: () => rootRouteImport,
} as any)
const GcTimeRoute = GcTimeRouteImport.update({
  id: '/gcTime',
  path: '/gcTime',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoadersPrefetchRoute = LoadersPrefetchRouteImport.update({
  id: '/prefetch',
  path: '/prefetch',
  getParentRoute: () => LoadersRoute,
} as any)
const LoadersNoLoaderRoute = LoadersNoLoaderRouteImport.update({
  id: '/no-loader',
  path: '/no-loader',
  getParentRoute: () => LoadersRoute,
} as any)
const LoadersEnsureRoute = LoadersEnsureRouteImport.update({
  id: '/ensure',
  path: '/ensure',
  getParentRoute: () => LoadersRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/gcTime': typeof GcTimeRoute
  '/loaders': typeof LoadersRouteWithChildren
  '/react-query': typeof ReactQueryRoute
  '/ssr': typeof SsrRoute
  '/loaders/ensure': typeof LoadersEnsureRoute
  '/loaders/no-loader': typeof LoadersNoLoaderRoute
  '/loaders/prefetch': typeof LoadersPrefetchRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/gcTime': typeof GcTimeRoute
  '/loaders': typeof LoadersRouteWithChildren
  '/react-query': typeof ReactQueryRoute
  '/ssr': typeof SsrRoute
  '/loaders/ensure': typeof LoadersEnsureRoute
  '/loaders/no-loader': typeof LoadersNoLoaderRoute
  '/loaders/prefetch': typeof LoadersPrefetchRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/gcTime': typeof GcTimeRoute
  '/loaders': typeof LoadersRouteWithChildren
  '/react-query': typeof ReactQueryRoute
  '/ssr': typeof SsrRoute
  '/loaders/ensure': typeof LoadersEnsureRoute
  '/loaders/no-loader': typeof LoadersNoLoaderRoute
  '/loaders/prefetch': typeof LoadersPrefetchRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/gcTime'
    | '/loaders'
    | '/react-query'
    | '/ssr'
    | '/loaders/ensure'
    | '/loaders/no-loader'
    | '/loaders/prefetch'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/gcTime'
    | '/loaders'
    | '/react-query'
    | '/ssr'
    | '/loaders/ensure'
    | '/loaders/no-loader'
    | '/loaders/prefetch'
  id:
    | '__root__'
    | '/'
    | '/gcTime'
    | '/loaders'
    | '/react-query'
    | '/ssr'
    | '/loaders/ensure'
    | '/loaders/no-loader'
    | '/loaders/prefetch'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GcTimeRoute: typeof GcTimeRoute
  LoadersRoute: typeof LoadersRouteWithChildren
  ReactQueryRoute: typeof ReactQueryRoute
  SsrRoute: typeof SsrRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/ssr': {
      id: '/ssr'
      path: '/ssr'
      fullPath: '/ssr'
      preLoaderRoute: typeof SsrRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/react-query': {
      id: '/react-query'
      path: '/react-query'
      fullPath: '/react-query'
      preLoaderRoute: typeof ReactQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/loaders': {
      id: '/loaders'
      path: '/loaders'
      fullPath: '/loaders'
      preLoaderRoute: typeof LoadersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gcTime': {
      id: '/gcTime'
      path: '/gcTime'
      fullPath: '/gcTime'
      preLoaderRoute: typeof GcTimeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/loaders/prefetch': {
      id: '/loaders/prefetch'
      path: '/prefetch'
      fullPath: '/loaders/prefetch'
      preLoaderRoute: typeof LoadersPrefetchRouteImport
      parentRoute: typeof LoadersRoute
    }
    '/loaders/no-loader': {
      id: '/loaders/no-loader'
      path: '/no-loader'
      fullPath: '/loaders/no-loader'
      preLoaderRoute: typeof LoadersNoLoaderRouteImport
      parentRoute: typeof LoadersRoute
    }
    '/loaders/ensure': {
      id: '/loaders/ensure'
      path: '/ensure'
      fullPath: '/loaders/ensure'
      preLoaderRoute: typeof LoadersEnsureRouteImport
      parentRoute: typeof LoadersRoute
    }
  }
}

interface LoadersRouteChildren {
  LoadersEnsureRoute: typeof LoadersEnsureRoute
  LoadersNoLoaderRoute: typeof LoadersNoLoaderRoute
  LoadersPrefetchRoute: typeof LoadersPrefetchRoute
}

const LoadersRouteChildren: LoadersRouteChildren = {
  LoadersEnsureRoute: LoadersEnsureRoute,
  LoadersNoLoaderRoute: LoadersNoLoaderRoute,
  LoadersPrefetchRoute: LoadersPrefetchRoute,
}

const LoadersRouteWithChildren =
  LoadersRoute._addFileChildren(LoadersRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GcTimeRoute: GcTimeRoute,
  LoadersRoute: LoadersRouteWithChildren,
  ReactQueryRoute: ReactQueryRoute,
  SsrRoute: SsrRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
